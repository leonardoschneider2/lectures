{"ast":null,"code":"var _jsxFileName = \"/home/leo_schneider/Documentos/dev/trybe/lectures/exercise-two/src/context/RedditProvider.js\";\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPostsBySubreddit from '../services/redditAPI';\nimport RedditContext from './RedditContext';\n\nfunction RedditProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const initialPostsBySubreddit = {\n    frontend: {\n      items: []\n    },\n    reactjs: {\n      items: []\n    }\n  };\n  const [postsBySubreddit, setPostsBySubreddit] = useState(initialPostsBySubreddit);\n  const [selectedSubreddit, setSelectedSubreddit] = useState('reactjs');\n  const [shouldRefreshSubreddit, setShouldRefreshSubreddit] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    // falta comparar caso o estado prévio foi alterado ou não\n    if (!hasSubredditLoaded()) {\n      fetchPosts();\n    }\n  }, []);\n\n  const fetchPosts = () => {\n    setShouldRefreshSubreddit(true);\n    setIsFetching(true);\n    getPostsBySubreddit(selectedSubreddit).then(handleFetchSuccess).catch(handleFetchError);\n  };\n\n  const hasSubredditLoaded = () => {\n    const posts = postsBySubreddit[selectedSubreddit];\n    return posts.items.length > 0;\n  };\n\n  const handleFetchSuccess = json => {\n    const lastUpdated = Date.now();\n    const items = json.data.children.map(child => child.data);\n    setShouldRefreshSubreddit(false);\n    setIsFetching(false);\n    setPostsBySubreddit({ ...postsBySubreddit,\n      [selectedSubreddit]: {\n        items,\n        lastUpdated\n      }\n    });\n  };\n\n  const handleFetchError = error => {\n    this.setState(state => ({ ...state,\n      shouldRefreshSubreddit: false,\n      isFetching: false,\n      postsBySubreddit: { ...state.postsBySubreddit,\n        [state.selectedSubreddit]: {\n          error: error.message,\n          items: []\n        }\n      }\n    }));\n  };\n\n  const handleSubredditChange = selectedSubreddit => setSelectedSubreddit({\n    selectedSubreddit\n  });\n\n  console.log(selectedSubreddit, postsBySubreddit[selectedSubreddit]);\n  const context = {\n    postsBySubreddit,\n    isFetching,\n    shouldRefreshSubreddit,\n    selectedSubreddit,\n    selectSubreddit: handleSubredditChange,\n    fetchPosts: fetchPosts,\n    availableSubreddits: Object.keys(postsBySubreddit),\n    posts: postsBySubreddit[selectedSubreddit].items\n  };\n  return /*#__PURE__*/React.createElement(RedditContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default RedditProvider;\nRedditProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"names":["PropTypes","React","useEffect","useState","getPostsBySubreddit","RedditContext","RedditProvider","children","initialPostsBySubreddit","frontend","items","reactjs","postsBySubreddit","setPostsBySubreddit","selectedSubreddit","setSelectedSubreddit","shouldRefreshSubreddit","setShouldRefreshSubreddit","isFetching","setIsFetching","hasSubredditLoaded","fetchPosts","then","handleFetchSuccess","catch","handleFetchError","posts","length","json","lastUpdated","Date","now","data","map","child","error","setState","state","message","handleSubredditChange","console","log","context","selectSubreddit","availableSubreddits","Object","keys","propTypes","node","isRequired"],"sources":["/home/leo_schneider/Documentos/dev/trybe/lectures/exercise-two/src/context/RedditProvider.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport getPostsBySubreddit from '../services/redditAPI';\nimport RedditContext from './RedditContext';\n\nfunction RedditProvider({children}) {\n  const initialPostsBySubreddit = {\n    frontend: {\n      items: [],\n    },\n    reactjs: {\n      items: [],\n    },\n  };\n\n  const [postsBySubreddit, setPostsBySubreddit] = useState(initialPostsBySubreddit);\n  const [selectedSubreddit, setSelectedSubreddit] = useState('reactjs');\n  const [shouldRefreshSubreddit, setShouldRefreshSubreddit] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    // falta comparar caso o estado prévio foi alterado ou não\n    if (!hasSubredditLoaded()) {\n      fetchPosts();\n    }\n  }, []);\n\n  const fetchPosts = () => {\n    setShouldRefreshSubreddit(true);\n    setIsFetching(true);\n\n    getPostsBySubreddit(selectedSubreddit)\n      .then(handleFetchSuccess)\n      .catch(handleFetchError);\n  }\n\n  const hasSubredditLoaded = () => {\n    const posts = postsBySubreddit[selectedSubreddit];\n\n    return posts.items.length > 0;\n  }\n\n  const handleFetchSuccess = (json) => {\n    const lastUpdated = Date.now();\n    const items = json.data.children.map((child) => child.data);\n\n    setShouldRefreshSubreddit(false);\n    setIsFetching(false);\n    setPostsBySubreddit({\n      ...postsBySubreddit,\n      [selectedSubreddit]: {\n        items,\n        lastUpdated,\n      }\n    });\n  }\n\n  const handleFetchError = (error) => {\n    this.setState((state) => ({\n      ...state,\n      shouldRefreshSubreddit: false,\n      isFetching: false,\n      postsBySubreddit: {\n        ...state.postsBySubreddit,\n        [state.selectedSubreddit]: {\n          error: error.message,\n          items: [],\n        },\n      },\n    }));\n  }\n\n  \n\n  const handleSubredditChange = (selectedSubreddit) => setSelectedSubreddit({ selectedSubreddit });\n  console.log(selectedSubreddit, postsBySubreddit[selectedSubreddit]);\n  const context = {\n    postsBySubreddit,\n    isFetching,\n    shouldRefreshSubreddit,\n    selectedSubreddit,\n    selectSubreddit: handleSubredditChange,\n    fetchPosts: fetchPosts,\n    availableSubreddits: Object.keys(postsBySubreddit),\n    posts: postsBySubreddit[selectedSubreddit].items,\n  };\n\n  return (\n    <RedditContext.Provider value={ context }>\n      { children }\n    </RedditContext.Provider>\n  );\n}\n\nexport default RedditProvider;\n\nRedditProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}