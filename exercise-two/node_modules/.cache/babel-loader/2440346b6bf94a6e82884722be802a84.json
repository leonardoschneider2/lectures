{"ast":null,"code":"var _jsxFileName = \"/home/leo_schneider/Documentos/dev/trybe/lectures/exercise-two/src/AppCopy.js\";\nimport React from 'react';\nimport Posts from './components/Posts';\nimport Selector from './components/Selector';\nimport RedditContext from './context/RedditContext';\n\nclass App extends React.Component {\n  componentDidMount() {\n    const {\n      fetchPosts\n    } = this.context;\n    fetchPosts();\n  }\n\n  render() {\n    const {\n      selectedSubreddit,\n      postsBySubreddit,\n      isFetching,\n      fetchPosts\n    } = this.context;\n    const {\n      lastUpdated,\n      items: posts = []\n    } = postsBySubreddit[selectedSubreddit];\n    const isEmpty = posts.length === 0;\n\n    if (isFetching) {\n      return /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }\n      }, \"Loading...\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Selector, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, lastUpdated && /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, `Last updated at ${new Date(lastUpdated).toLocaleTimeString()}.`), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: fetchPosts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, \"Refresh\")), isEmpty ? /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, \"Empty.\") : /*#__PURE__*/React.createElement(Posts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 39\n      }\n    }));\n  }\n\n}\n\nApp.contextType = RedditContext;\nexport default App;","map":{"version":3,"names":["React","Posts","Selector","RedditContext","App","Component","componentDidMount","fetchPosts","context","render","selectedSubreddit","postsBySubreddit","isFetching","lastUpdated","items","posts","isEmpty","length","Date","toLocaleTimeString","contextType"],"sources":["/home/leo_schneider/Documentos/dev/trybe/lectures/exercise-two/src/AppCopy.js"],"sourcesContent":["import React from 'react';\n\nimport Posts from './components/Posts';\nimport Selector from './components/Selector';\nimport RedditContext from './context/RedditContext';\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { fetchPosts } = this.context;\n    fetchPosts();\n  }\n\n  render() {\n    const { selectedSubreddit, postsBySubreddit, isFetching, fetchPosts } = this.context;\n    const { lastUpdated, items: posts = [] } = postsBySubreddit[selectedSubreddit];\n    const isEmpty = (posts.length === 0);\n    if (isFetching) {\n      return (<h2>Loading...</h2>);\n    }\n    return (\n      <div>\n        <Selector />\n        <div>\n          { lastUpdated && (\n            <span>\n              { `Last updated at ${new Date(lastUpdated).toLocaleTimeString()}.` }\n            </span>\n          ) }\n\n          <button\n            type=\"button\"\n            onClick={ fetchPosts }\n          >\n            Refresh\n          </button>\n        </div>\n        { isEmpty ? <h2>Empty.</h2> : <Posts /> }\n      </div>\n    );\n  }\n}\n\nApp.contextType = RedditContext;\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;EAChCC,iBAAiB,GAAG;IAClB,MAAM;MAAEC;IAAF,IAAiB,KAAKC,OAA5B;IACAD,UAAU;EACX;;EAEDE,MAAM,GAAG;IACP,MAAM;MAAEC,iBAAF;MAAqBC,gBAArB;MAAuCC,UAAvC;MAAmDL;IAAnD,IAAkE,KAAKC,OAA7E;IACA,MAAM;MAAEK,WAAF;MAAeC,KAAK,EAAEC,KAAK,GAAG;IAA9B,IAAqCJ,gBAAgB,CAACD,iBAAD,CAA3D;IACA,MAAMM,OAAO,GAAID,KAAK,CAACE,MAAN,KAAiB,CAAlC;;IACA,IAAIL,UAAJ,EAAgB;MACd,oBAAQ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBAAR;IACD;;IACD,oBACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE,oBAAC,QAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,eAEE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACIC,WAAW,iBACX;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACK,mBAAkB,IAAIK,IAAJ,CAASL,WAAT,EAAsBM,kBAAtB,EAA2C,GADlE,CAFJ,eAOE;MACE,IAAI,EAAC,QADP;MAEE,OAAO,EAAGZ,UAFZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,aAPF,CAFF,EAgBIS,OAAO,gBAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,YAAH,gBAAqB,oBAAC,KAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAhBhC,CADF;EAoBD;;AAjC+B;;AAoClCZ,GAAG,CAACgB,WAAJ,GAAkBjB,aAAlB;AAEA,eAAeC,GAAf"},"metadata":{},"sourceType":"module"}