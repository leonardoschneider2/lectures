{"ast":null,"code":"var _jsxFileName = \"/home/leo_schneider/Documentos/dev/trybe/lectures/exercise-two/src/context/RedditProvider.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport getPostsBySubreddit from '../services/redditAPI';\nimport RedditContext from './RedditContext';\n\nclass RedditProvider extends React.Component {\n  constructor() {\n    super();\n\n    this.hasSubredditLoaded = () => {\n      const {\n        selectedSubreddit,\n        postsBySubreddit\n      } = this.state;\n      const posts = postsBySubreddit[selectedSubreddit];\n      return posts.items.length > 0;\n    };\n\n    this.handleFetchSuccess = json => {\n      const lastUpdated = Date.now();\n      const items = json.data.children.map(child => child.data);\n      this.setState(state => ({ ...state,\n        shouldRefreshSubreddit: false,\n        isFetching: false,\n        postsBySubreddit: { ...state.postsBySubreddit,\n          [state.selectedSubreddit]: {\n            items,\n            lastUpdated\n          }\n        }\n      }));\n    };\n\n    this.handleFetchError = error => {\n      this.setState(state => ({ ...state,\n        shouldRefreshSubreddit: false,\n        isFetching: false,\n        postsBySubreddit: { ...state.postsBySubreddit,\n          [state.selectedSubreddit]: {\n            error: error.message,\n            items: []\n          }\n        }\n      }));\n    };\n\n    this.fetchPosts = () => {\n      this.setState({\n        shouldRefreshSubreddit: false,\n        isFetching: true\n      });\n      const {\n        selectedSubreddit\n      } = this.state;\n      getPostsBySubreddit(selectedSubreddit).then(this.handleFetchSuccess).catch(this.handleFetchError);\n    };\n\n    this.handleSubredditChange = selectedSubreddit => this.setState({\n      selectedSubreddit\n    });\n\n    this.state = {\n      postsBySubreddit: {\n        frontend: {\n          items: []\n        },\n        reactjs: {\n          items: []\n        }\n      },\n      selectedSubreddit: 'reactjs',\n      shouldRefreshSubreddit: false,\n      isFetching: false\n    };\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    const {\n      selectedSubreddit\n    } = this.state;\n    const selectedSubredditChanged = prevState.selectedSubreddit !== selectedSubreddit;\n\n    if (selectedSubredditChanged && !this.hasSubredditLoaded()) {\n      this.fetchPosts();\n    }\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      selectedSubreddit,\n      postsBySubreddit\n    } = this.state;\n    const context = { ...this.state,\n      selectSubreddit: this.handleSubredditChange,\n      fetchPosts: this.fetchPosts,\n      availableSubreddits: Object.keys(postsBySubreddit),\n      posts: postsBySubreddit[selectedSubreddit].items\n    };\n    return /*#__PURE__*/React.createElement(RedditContext.Provider, {\n      value: context,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, children);\n  }\n\n}\n\nexport default RedditProvider;\nRedditProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"names":["PropTypes","React","getPostsBySubreddit","RedditContext","RedditProvider","Component","constructor","hasSubredditLoaded","selectedSubreddit","postsBySubreddit","state","posts","items","length","handleFetchSuccess","json","lastUpdated","Date","now","data","children","map","child","setState","shouldRefreshSubreddit","isFetching","handleFetchError","error","message","fetchPosts","then","catch","handleSubredditChange","frontend","reactjs","componentDidUpdate","_prevProps","prevState","selectedSubredditChanged","render","props","context","selectSubreddit","availableSubreddits","Object","keys","propTypes","node","isRequired"],"sources":["/home/leo_schneider/Documentos/dev/trybe/lectures/exercise-two/src/context/RedditProvider.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\n\nimport getPostsBySubreddit from '../services/redditAPI';\nimport RedditContext from './RedditContext';\n\nclass RedditProvider extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      postsBySubreddit: {\n        frontend: {\n          items: [],\n        },\n        reactjs: {\n          items: [],\n        },\n      },\n      selectedSubreddit: 'reactjs',\n      shouldRefreshSubreddit: false,\n      isFetching: false,\n    };\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    const { selectedSubreddit } = this.state;\n    const selectedSubredditChanged = prevState.selectedSubreddit !== selectedSubreddit;\n\n    if (selectedSubredditChanged && !this.hasSubredditLoaded()) {\n      this.fetchPosts();\n    }\n  }\n\n  hasSubredditLoaded = () => {\n    const {\n      selectedSubreddit,\n      postsBySubreddit,\n    } = this.state;\n\n    const posts = postsBySubreddit[selectedSubreddit];\n\n    return posts.items.length > 0;\n  }\n\n  handleFetchSuccess = (json) => {\n    const lastUpdated = Date.now();\n    const items = json.data.children.map((child) => child.data);\n\n    this.setState((state) => ({\n      ...state,\n      shouldRefreshSubreddit: false,\n      isFetching: false,\n      postsBySubreddit: {\n        ...state.postsBySubreddit,\n        [state.selectedSubreddit]: {\n          items,\n          lastUpdated,\n        },\n      },\n    }));\n  }\n\n  handleFetchError = (error) => {\n    this.setState((state) => ({\n      ...state,\n      shouldRefreshSubreddit: false,\n      isFetching: false,\n      postsBySubreddit: {\n        ...state.postsBySubreddit,\n        [state.selectedSubreddit]: {\n          error: error.message,\n          items: [],\n        },\n      },\n    }));\n  }\n\n  fetchPosts = () => {\n    this.setState({\n      shouldRefreshSubreddit: false,\n      isFetching: true,\n    });\n\n    const { selectedSubreddit } = this.state;\n    getPostsBySubreddit(selectedSubreddit)\n      .then(this.handleFetchSuccess)\n      .catch(this.handleFetchError);\n  }\n\n  handleSubredditChange = (selectedSubreddit) => this.setState({ selectedSubreddit });\n\n  render() {\n    const { children } = this.props;\n    const { selectedSubreddit, postsBySubreddit } = this.state;\n    const context = {\n      ...this.state,\n      selectSubreddit: this.handleSubredditChange,\n      fetchPosts: this.fetchPosts,\n      availableSubreddits: Object.keys(postsBySubreddit),\n      posts: postsBySubreddit[selectedSubreddit].items,\n    };\n\n    return (\n      <RedditContext.Provider value={ context }>\n        { children }\n      </RedditContext.Provider>\n    );\n  }\n}\n\nexport default RedditProvider;\n\nRedditProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}